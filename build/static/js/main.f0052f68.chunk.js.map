{"version":3,"sources":["Services/personServices.js","components/showPerson.js","components/personForm.js","components/filter.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","then","response","data","id","put","delete","showPerson","person","handleDelete","name","number","onClick","personForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","filter","handleFilterChange","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","message","setMessage","error","setError","useEffect","personServices","changeNumber","console","log","find","n","changedPerson","map","item","catch","setTimeout","deletePerson","window","confirm","foundPersons","toLowerCase","includes","Notification","isError","className","event","target","preventDefault","personObject","some","x","returnedPerson","concat","i","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0052f68.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  \r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst del = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { \r\n  getAll, \r\n  create, \r\n  update,\r\n  del, \r\n}\r\n\r\n","import React from \"react\";\r\n\r\nconst showPerson = ({person, handleDelete}) => {\r\n\r\n  return (\r\n  \r\n    <li>\r\n      {person.name} {person.number} \r\n      <button onClick={() => handleDelete(person)}>Poista</button>\r\n    </li>\r\n  )\r\n};\r\n\r\nexport default showPerson;\r\n","import React from \"react\";\r\n\r\nconst personForm = (props) => {\r\n  return (\r\n    <div>\r\n      <h1>Add a new</h1>\r\n      <form onSubmit={props.addPerson}>\r\n        <div>\r\n          name <input value={props.newName} onChange={props.handleNameChange} />\r\n        </div>\r\n        <div>\r\n          number <input value={props.newNumber} onChange={props.handleNumberChange} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default personForm;\r\n","import React from \"react\";\r\n\r\nconst filter = ({ handleFilterChange }) => {\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <div>\r\n        <form>\r\n          filter shown with <input onChange={handleFilterChange}></input>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default filter;\r\n","import React, { useState, useEffect } from \"react\";\nimport personServices from \"./Services/personServices\";\nimport ShowPerson from \"./components/showPerson\";\nimport PersonForm from \"./components/personForm\";\nimport Filter from \"./components/filter\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setNewFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    personServices.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n\n    const sameName = persons.some((item) => item.name === newName);\n\n    if (sameName) {\n      if (window.confirm(`${newName} on jo lisÃ¤tty, vaihdetaanko numeroa?`)) {\n        let person = persons.find((x) => x.name === newName);\n        console.log(person.id);\n        changeNumber(person.id, newNumber);\n      }\n    } else {\n      personServices.create(personObject).then((returnedPerson) => {\n        setPersons(persons.concat(returnedPerson));\n        setNewName(\"\");\n        setNewNumber(\"\");\n        setMessage(`Added ${newName}`);\n        setError(false);\n      });\n      setTimeout(() => {\n        setMessage(null);\n      }, 5000);\n    }\n  };\n\n  const changeNumber = (id, newNumber) => {\n    console.log(\"painettu\");\n    const person = persons.find((n) => n.id === id);\n    const changedPerson = { ...person, number: newNumber };\n\n    personServices\n      .update(changedPerson.id, changedPerson)\n      .then((response) => {\n        setPersons(\n          persons.map((item) => (item.id !== id ? item : response.data))\n        );\n        setMessage(`information of ${person.name} has been changed`);\n      })\n      .catch((error) => {\n        setMessage(\n          `information of ${person.name} has already been removed grom the server`\n        );\n        setError(true);\n      });\n    setTimeout(() => {\n      setMessage(null);\n      setError(false);\n    }, 5000);\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value);\n  };\n\n  const handleDelete = (deletePerson) => {\n    if (window.confirm(`poistetaanko ${deletePerson.name}?`))\n      personServices.del(deletePerson.id).then((response) => {\n        setPersons(response.data);\n      });\n    setMessage(`${deletePerson.name} deleted from the server`);\n    setTimeout(() => {\n      setMessage(null);\n      setError(false);\n    }, 5000);\n  };\n\n  const foundPersons = persons.filter((person) =>\n    person.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const Notification = ({ message, isError }) => {\n    if (message === null) {\n      return null;\n    }\n\n    return <div className={error ? \"error\" : \"succes\"}>{message}</div>;\n  };\n\n  return (\n    <div>\n      <Notification message={message} />\n      <Filter handleFilterChange={handleFilterChange} />\n      <PersonForm\n        addPerson={addPerson}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newName={newName}\n        newNumber={newNumber}\n      />\n      <ul>\n        {foundPersons.map((item, i) => (\n          <ShowPerson key={i} person={item} handleDelete={handleDelete} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}